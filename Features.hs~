module Features (
      Feature (..)
    , compute, features
) where

import Data.Int
    
import Primitives
import IntegralImage (IntegralImage, computeIntegralImage)
import qualified Window as W

data Feature = TwoVertRect Rect
             | TwoHorizRect Rect
             | ThreeVertRect Rect
             | ThreeHorizRect Rect
             | FourRect Rect
    deriving (Show, Read, Eq)

compute :: Feature -> W.Win -> Int64
compute (TwoVertRect (Rect (Point x y) (Size w h))) win =
    {- a ------- b
       -         -
       -   S1    -
       -         -
       c ------- d
       -         -
       -   S2    -
       -         -
       e ------- f
    -}
    let h' = h `div` 2
        a = W.getValue win x y
        b = W.getValue win (x+w) y
        c = W.getValue win x (y+h')
        d = W.getValue win (x+w) (y+h')
        e = W.getValue win x (y+h)
        f = W.getValue win (x+w) (y+h)
        s1 = d + a - b - c
        s2 = f + c - d - e
    in s2 - s1
    
compute (TwoHorizRect (Rect (Point x y) (Size w h))) win =
    {- a ------- b ------- c
       -         -         -
       -   S1    -   S2    -
       -         -         -
       d ------- e ------- f
    -}
    let w' = w `div` 2
        a = W.getValue win x y
        b = W.getValue win (x+w') y
        c = W.getValue win (x+w) y
        d = W.getValue win x (y+h)
        e = W.getValue win (x+w') (y+h)
        f = W.getValue win (x+w) (y+h)
        s1 = e + a - b - d
        s2 = f + b - c - e
    in s2 - s1

compute (ThreeVertRect (Rect (Point x y) (Size w h))) win =
    {- a ------- b
       -         -
       -   S1    -
       -         -
       c ------- d
       -         -
       -   S2    -
       -         -
       e ------- f
       -         -
       -   S3    -
       -         -
       g ------- h
    -}
    let h' = h `div` 3
        a = W.getValue win x y
        b = W.getValue win (x+w) y
        c = W.getValue win x (y+h')
        d = W.getValue win (x+w) (y+h')
        e = W.getValue win x (y+h'+h')
        f = W.getValue win (x+w) (y+h'+h')
        g = W.getValue win x (y+h)
        h'' = W.getValue win (x+w) (y+h)
        s1 = d + a - b - c
        s2 = f + c - d - e
        s3 = h'' + e - f - g
    in s1 + s3 - s2
        
compute (ThreeHorizRect (Rect (Point x y) (Size w h))) win =
    {- a ------- b ------- c ------- d
       -         -         -         -
       -   S1    -   S2    -   S3    -
       -         -         -         -
       e ------- f ------- g ------- h
    -}
    let w' = w `div` 3
        a = W.getValue win x y
        b = W.getValue win (x+w') y
        c = W.getValue win (x+w'+w') y
        d = W.getValue win (x+w) y
        e = W.getValue win x (y+h)
        f = W.getValue win (x+w') (y+h)
        g = W.getValue win (x+w'+w') (y+h)
        h'' = W.getValue win (x+w) (y+h)
        s1 = f + a - b - e
        s2 = g + b - c - f
        s3 = h'' + c - d - g
    in s1 + s3 - s2
    
compute (FourRect (Rect (Point x y) (Size w h))) win =
    {- a ------- b ------- c
       -         -         -
       -   S1    -    S2   -
       -         -         -
       d ------- e ------- f
       -         -         -
       -   S3    -    S4   -
       -         -         -
       g ------- h ------- i
    -}
    let w' = w `div` 2
        h' = h `div` 2
        a = W.getValue win x y
        b = W.getValue win (x+w') y
        c = W.getValue win (x+w) y
        d = W.getValue win x (y+h')
        e = W.getValue win (x+w') (y+h')
        f = W.getValue win (x+w) (y+h')
        g = W.getValue win x (y+h)
        h'' = W.getValue win (x+w') (y+h)
        i = W.getValue win (x+w) (y+h)
        s1 = e + a - b - d
        s2 = f + b - c - d
        s3 = h'' + d - e - g
        s4 = i + e - f - h''
    in s1 + s4 - s2 - s3


-- | List all features inside a standard window.
features =
    map TwoVertRect (W.featuresPos 1 2) ++
    map TwoHorizRect (W.featuresPos 2 1) ++
    map ThreeVertRect (W.featuresPos 1 3) ++
    map ThreeHorizRect (W.featuresPos 3 1) ++
    map FourRect (W.featuresPos 2 2)